"""init

Revision ID: 592b912adf54
Revises: 
Create Date: 2024-12-02 13:22:59.911782

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "592b912adf54"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    bind = op.get_bind()
    inspector = sa.Inspector.from_engine(bind)

    has_apikeys = "apikeys" in inspector.get_table_names()
    has_users = "users" in inspector.get_table_names()
    has_cdms = "cdms" in inspector.get_table_names()
    has_keys = "keys_" in inspector.get_table_names()

    # ### commands auto generated by Alembic - please adjust! ###
    if not has_apikeys:
        op.create_table(
            "apikeys",
            sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
            sa.Column("created_at", sa.DateTime(), nullable=False),
            sa.Column("api_key", sa.String(length=255), nullable=False),
            sa.Column("user_id", sa.String(length=255), nullable=False),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("id"),
        )

    if not has_users:
        op.create_table(
            "users",
            sa.Column("id", sa.String(length=255), nullable=False),
            sa.Column("username", sa.String(length=255), nullable=False),
            sa.Column("discriminator", sa.String(length=255), nullable=False),
            sa.Column("avatar", sa.String(length=255), nullable=True),
            sa.Column("public_flags", sa.Integer(), nullable=False),
            sa.Column("api_key", sa.String(length=255), nullable=False),
            sa.Column("flags", sa.Integer(), nullable=False),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("id"),
        )

    if not has_cdms:
        op.create_table(
            "cdms",
            sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
            sa.Column("session_id_type", sa.String(length=255), nullable=False),
            sa.Column("security_level", sa.Integer(), nullable=False),
            sa.Column("client_id_blob_filename", sa.Text(), nullable=False),
            sa.Column("device_private_key", sa.Text(), nullable=False),
            sa.Column("code", sa.Text(), nullable=False),
            sa.Column("uploaded_by", sa.String(length=255), nullable=True),
            sa.ForeignKeyConstraint(
                ["uploaded_by"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )

    if not has_keys:
        op.create_table(
            "keys_",
            sa.Column("kid", sa.String(length=32), nullable=False),
            sa.Column("added_at", sa.Integer(), nullable=False),
            sa.Column("added_by", sa.String(length=255), nullable=True),
            sa.Column("license_url", sa.Text(), nullable=False),
            sa.Column("key_", sa.String(length=255), nullable=False),
            sa.ForeignKeyConstraint(
                ["added_by"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("kid"),
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("keys_")
    op.drop_table("cdms")
    op.drop_table("users")
    op.drop_table("apikeys")
    # ### end Alembic commands ###
